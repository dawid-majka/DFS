syntax = "proto3";

import "shared.proto";

package dfs.master_server;

service ClientService {

  rpc OpenFile(OpenFileRequest) returns (OpenFileResponse) {}

  rpc CloseFile(CloseFileRequest) returns (shared.EmptyReply) {}

  rpc CreateFile(CreateFileRequest) returns (shared.EmptyReply) {}

  rpc DeleteFile(DeleteFileRequest) returns (shared.EmptyReply) {}

  rpc AllocateChunk(AllocateChunkRequest) returns (AllocateChunkResponse) {}

  rpc Mkdir(MkdirRequest) returns (shared.EmptyReply) {}
  
  rpc Ls(LsRequest) returns (LsResponse) {}
}


message OpenFileRequest {
  string file_path = 1;
  // TODO: change mode to enum
  string mode = 2;
}

// If Mode::Read -> list of chunk_handles with associated chunk servers
// TODO: Add reading by chunks
// If Mode::Write -> Empty for now 
message OpenFileResponse {
  repeated ChunkMetadata chunks_metadata = 1;
}

message CloseFileRequest {
  string file_path = 1;
}

message CreateFileRequest {
  string file_path = 1;
}

message DeleteFileRequest {
  string file_path = 1;
}

message AllocateChunkRequest {
  string file_path = 1;
}

message AllocateChunkResponse {
  ChunkMetadata chunk_metadata = 1;
}

message ChunkMetadata {
  string chunk_handle = 1;
  repeated string locations = 2;  
}

message ChunkLocation {
  string address = 2;
}

message MkdirRequest {
  string path = 1;
}

message LsRequest {
  string path = 1;
}

message LsResponse {
  repeated string content = 1;
}

// TODO: Probably change that master pings chunk servers
service ChunkService {
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
  // TODO: Move re-replication, rebalancing and leasing to separate requests  
  // garbage collection is mentioned to be done using heartbeat
}

message HeartbeatRequest {
  string server_address = 1;
  uint64 used = 2;
  uint64 available = 3;
  repeated string chunk_handles = 4;
}

message HeartbeatResponse {
  // Handles of chunks to delete
  repeated string to_delete = 1;
}


