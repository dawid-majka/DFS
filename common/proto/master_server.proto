syntax = "proto3";

import "shared.proto";

package dfs.master_server;

// TODO: Update
service ClientService {

  rpc UploadFile(UploadFileRequest) returns (UploadFileResponse) {}

  rpc DownloadFile(DownloadFileRequest) returns (DownloadFileResponse) {}

  rpc Mkdir(MkdirRequest) returns (shared.EmptyReply) {}
  
  rpc Ls(LsRequest) returns (LsResponse) {}
}


message UploadFileRequest {
  string file_name = 1;
  string chunk_id = 2;
}

message UploadFileResponse {
  uint64 chunk_id = 1;
  repeated ChunkLocation chunk_locations = 2; 
}

message DownloadFileRequest {
  string file_name = 1;
}

message DownloadFileResponse {
  repeated ChunkMetadata chunks = 1;
}

message ChunkMetadata {
  uint64 chunk_id = 1;
  repeated ChunkLocation locations = 2; 
}

message ChunkLocation {
  string address = 2;
}

message MkdirRequest {
  string path = 1;
}

message LsRequest {
  string path = 1;
}

message LsResponse {
  repeated string content = 1;
}


service ChunkService {
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
  // TODO: Move re-replication, rebalancing and leasing to separate requests  
  // garbage collection is mentioned to be done using heartbeat
}

message HeartbeatRequest {
  string server_address = 1;
  uint64 used = 2;
  uint64 available = 3;
  repeated string chunk_handles = 4;
}

message HeartbeatResponse {
  // Handles of chunks to delete
  repeated string to_delete = 1;
}


